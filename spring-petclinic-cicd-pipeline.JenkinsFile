pipeline {
    agent any
    
    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from Git
                git branch: 'add-docker-file', url: 'https://github.com/banamlehsb/spring-petclinic.git'
            }
        }
        stage('Test') {
            steps {
                echo "Running tests..."
                sh './gradlew clean test'
            }
        }
        stage('Build Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    docker.build("spring-petclinic:latest", "-f Dockerfile-build .")
                }
            }
        }
        stage('Verify Image') {
            steps {
                script {
                    echo "Verifying Docker image..."
                    sh 'docker-compose down'
                    sleep 5
                    // Run the Docker image
                    sh 'docker-compose up -d'
                    
                    // Perform a health check
                    sleep 20 // Wait for the application to start
                    script {
                        def healthCheck = sh(script: 'curl -s http://localhost:8011/actuator/health', returnStdout: true).trim()
                        echo "Health check response: ${healthCheck}"
                        if (healthCheck.contains('UP')) {
                            echo "Health check passed."
                            // Stop and remove the container
                            sh 'docker-compose down'
                        } else {
                            echo "Health check failed. Exiting..."
                            error('Health check failed. Exiting...')
                        }
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                echo "Deploying application..."
                sh 'docker-compose up -d'
            }
        }
    }
    post {
        always {
            echo "Cleaning up..."
            // Stash Gradle cache after the build
            script {
                stash includes: '.gradle/**', name: 'gradle-cache'
            }
        }
        failure {
            echo "Pipeline failed."
        }
        success {
            echo "Pipeline succeeded."
        }
    }
}